// Code generated by candi v1.8.17.

package resthandler

import (
	"net/http"

	"monorepo/services/auth-service/internal/modules/token/usecase"

	"github.com/labstack/echo"
	"pkg.agungdp.dev/candi/candihelper"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
	"pkg.agungdp.dev/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.TokenUsecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(mw interfaces.Middleware, uc usecase.TokenUsecase, validator interfaces.Validator) *RestHandler {
	return &RestHandler{
		mw: mw, uc: uc, validator: validator,
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root *echo.Group) {
	v1Root := root.Group(candihelper.V1)

	token := v1Root.Group("/token")
	token.POST("/generate", h.generateToken, echo.WrapMiddleware(h.mw.HTTPBasicAuth))
	token.POST("/validate", h.validateToken)
	token.POST("/refresh", h.refreshToken)
	token.POST("/revoke", h.revokeToken)
}

func (h *RestHandler) generateToken(c echo.Context) error {
	trace := tracer.StartTrace(c.Request().Context(), "DeliveryREST:GenerateToken")
	defer trace.Finish()
	ctx := trace.Context()

	var payload domain.PayloadGenerateToken
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	var tokenClaim domain.Claim
	tokenClaim.User.ID = payload.UserID
	tokenClaim.User.Username = payload.Username
	tokenClaim.DeviceID = payload.DeviceID
	data, err := h.uc.Generate(ctx, &tokenClaim)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(c.Response())
}

func (h *RestHandler) validateToken(c echo.Context) error {
	trace := tracer.StartTrace(c.Request().Context(), "DeliveryREST:ValidateToken")
	defer trace.Finish()
	ctx := trace.Context()

	var payload struct {
		Token string `json:"token"`
	}
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	claim, err := h.uc.Validate(ctx, payload.Token)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", claim).JSON(c.Response())
}

func (h *RestHandler) refreshToken(c echo.Context) error {
	trace := tracer.StartTrace(c.Request().Context(), "DeliveryREST:RefreshToken")
	defer trace.Finish()
	ctx := trace.Context()

	var payload struct {
		Token        string `json:"token"`
		RefreshToken string `json:"refresh_token"`
	}
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	claim, err := h.uc.Refresh(ctx, payload.Token, payload.RefreshToken)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", claim).JSON(c.Response())
}

func (h *RestHandler) revokeToken(c echo.Context) error {
	trace := tracer.StartTrace(c.Request().Context(), "DeliveryREST:RevokeToken")
	defer trace.Finish()
	ctx := trace.Context()

	var payload struct {
		Token string `json:"token"`
	}
	if err := c.Bind(&payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	err := h.uc.Revoke(ctx, payload.Token)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}
