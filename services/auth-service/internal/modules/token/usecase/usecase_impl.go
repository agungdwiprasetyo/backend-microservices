// Code generated by candi v1.3.1.

package usecase

import (
	"context"
	"crypto/rsa"
	"errors"
	"time"

	"monorepo/services/auth-service/internal/modules/token/domain"
	"monorepo/services/auth-service/pkg/shared/repository"

	jwt "github.com/dgrijalva/jwt-go"
	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/codebase/factory/dependency"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
)

const (
	// TokenKey const
	TokenKey = "18608c7d-b319-0xc000165c80-0xc0000da000-11478e4e2650"
)

var (
	// ErrTokenFormat var
	ErrTokenFormat = errors.New("Invalid token format")
	// ErrTokenExpired var
	ErrTokenExpired = errors.New("Token is expired")
)

type tokenUsecaseImpl struct {
	cache interfaces.Cache

	repoMongo  *repository.RepoMongo
	publicKey  *rsa.PublicKey
	privateKey *rsa.PrivateKey
}

// NewTokenUsecase usecase impl constructor
func NewTokenUsecase(deps dependency.Dependency) TokenUsecase {
	return &tokenUsecaseImpl{
		cache:      deps.GetRedisPool().Cache(),
		repoMongo:  repository.GetSharedRepoMongo(),
		publicKey:  deps.GetKey().PublicKey(),
		privateKey: deps.GetKey().PrivateKey(),
	}
}

// Generate token
func (uc *tokenUsecaseImpl) Generate(ctx context.Context, payload *domain.Claim) (tokenString string, err error) {
	trace := tracer.StartTrace(ctx, "TokenUsecase:Generate")
	defer trace.Finish()
	ctx = trace.Context()

	now := time.Now()
	exp := now.Add(60 * time.Hour)

	var key interface{}
	var token = new(jwt.Token)
	if payload.Alg == domain.HS256 {
		token = jwt.New(jwt.SigningMethodHS256)
		key = []byte(TokenKey)
	} else {
		token = jwt.New(jwt.SigningMethodRS256)
		key = uc.privateKey
	}
	claims := jwt.MapClaims{
		"iss":  "agungdwiprasetyo.com",
		"exp":  exp.Unix(),
		"iat":  now.Unix(),
		"did":  payload.DeviceID,
		"aud":  payload.Audience,
		"jti":  payload.Id,
		"sub":  payload.User.ID,
		"user": payload.User,
	}
	token.Claims = claims

	tokenString, err = token.SignedString(key)
	return
}

// Refresh token
func (uc *tokenUsecaseImpl) Refresh(ctx context.Context, token string) <-chan candishared.Result {
	output := make(chan candishared.Result)

	go func() {
		defer close(output)
	}()

	return output
}

// Validate token
func (uc *tokenUsecaseImpl) Validate(ctx context.Context, tokenString string) (claim *domain.Claim, err error) {
	trace := tracer.StartTrace(ctx, "TokenUsecase:Validate")
	defer trace.Finish()
	ctx = trace.Context()

	tokenParse, err := jwt.ParseWithClaims(tokenString, &domain.Claim{}, func(token *jwt.Token) (interface{}, error) {
		checkAlg, _ := candishared.GetValueFromContext(ctx, candishared.ContextKey("tokenAlg")).(string)
		if checkAlg == domain.HS256 {
			return []byte(TokenKey), nil
		}
		return uc.publicKey, nil
	})

	switch ve := err.(type) {
	case *jwt.ValidationError:
		if ve.Errors == jwt.ValidationErrorExpired {
			err = ErrTokenExpired
		} else {
			err = ErrTokenFormat
		}
	}

	if err != nil {
		return
	}

	if !tokenParse.Valid {
		return claim, ErrTokenFormat
	}

	claim, _ = tokenParse.Claims.(*domain.Claim)
	return
}

// Revoke token
func (uc *tokenUsecaseImpl) Revoke(ctx context.Context, token string) <-chan candishared.Result {
	output := make(chan candishared.Result)

	go func() {
		defer close(output)
	}()

	return output
}
