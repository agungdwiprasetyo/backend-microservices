// Code generated by candi v1.3.1.

package workerhandler

import (
	"context"
	"fmt"

	"monorepo/services/line-chatbot/internal/modules/event/usecase"

	"pkg.agungdwiprasetyo.com/candi/codebase/factory/types"
	"pkg.agungdwiprasetyo.com/candi/codebase/interfaces"
	"pkg.agungdwiprasetyo.com/candi/tracer"
)

// KafkaHandler struct
type KafkaHandler struct {
	uc        usecase.EventUsecase
	validator interfaces.Validator
}

// NewKafkaHandler constructor
func NewKafkaHandler(uc usecase.EventUsecase, validator interfaces.Validator) *KafkaHandler {
	return &KafkaHandler{
		uc:        uc,
		validator: validator,
	}
}

// MountHandlers mount handler group
func (h *KafkaHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("event", h.handleEvent) // handling topic "event"
}

// ProcessMessage from kafka consumer
func (h *KafkaHandler) handleEvent(ctx context.Context, message []byte) error {
	trace := tracer.StartTrace(ctx, "EventDeliveryKafka:Hello")
	defer trace.Finish()
	ctx = trace.Context()

	fmt.Printf("message consumed by module event. message: %s\n", string(message))
	return nil
}
