// Code generated by candi v1.3.1.

package configs

import (
	"context"

	"monorepo/services/line-chatbot/pkg/helper"
	"monorepo/services/line-chatbot/pkg/shared"
	"monorepo/services/line-chatbot/pkg/shared/repository"
	"monorepo/services/line-chatbot/pkg/shared/usecase"

	"github.com/line/line-bot-sdk-go/linebot"
	"pkg.agungdwiprasetyo.com/candi/codebase/factory/dependency"

	// "pkg.agungdwiprasetyo.com/candi/codebase/factory/types"
	"pkg.agungdwiprasetyo.com/candi/candihelper"
	"pkg.agungdwiprasetyo.com/candi/codebase/interfaces"
	"pkg.agungdwiprasetyo.com/candi/config"
	"pkg.agungdwiprasetyo.com/candi/config/broker"
	"pkg.agungdwiprasetyo.com/candi/config/database"
	"pkg.agungdwiprasetyo.com/candi/middleware"
	"pkg.agungdwiprasetyo.com/candi/validator"
)

// LoadConfigs load selected dependency configuration in this service
func LoadConfigs(baseCfg *config.Config) (deps dependency.Dependency) {

	var sharedEnv shared.Environment
	candihelper.MustParseEnv(&sharedEnv)
	shared.SetEnv(sharedEnv)

	baseCfg.LoadFunc(func(ctx context.Context) []interfaces.Closer {
		brokerDeps := broker.InitBrokers(
		// types.Kafka,
		)
		redisDeps := database.InitRedis()
		// sqlDeps := database.InitSQLDatabase()
		mongoDeps := database.InitMongoDB(ctx)

		lineClient, err := linebot.New(sharedEnv.LineClientSecret, sharedEnv.LineClientToken)
		if err != nil {
			panic(err)
		}
		extended := map[string]interface{}{
			helper.LineClient: lineClient,
		}

		// inject all service dependencies
		// See all option in dependency package
		deps = dependency.InitDependency(
			dependency.SetMiddleware(middleware.NewMiddleware(&shared.DefaultTokenValidator{})),
			dependency.SetValidator(validator.NewValidator()),
			dependency.SetBroker(brokerDeps),
			dependency.SetRedisPool(redisDeps),
			// dependency.SetSQLDatabase(sqlDeps),
			dependency.SetMongoDatabase(mongoDeps),
			dependency.SetExtended(extended),
			// ... add more dependencies
		)
		return []interfaces.Closer{ // throw back to base config for close connection when application shutdown
			brokerDeps,
			redisDeps,
			// sqlDeps,
			mongoDeps,
		}
	})

	repository.SetSharedRepository(deps)
	usecase.SetSharedUsecase(deps)

	return deps
}
