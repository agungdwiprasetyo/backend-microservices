// Code generated by candi v1.4.0.

package repository

import (
	"context"
	"monorepo/services/master-service/internal/modules/acl/domain"
	shareddomain "monorepo/services/master-service/pkg/shared/domain"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"pkg.agungdp.dev/candi/candihelper"
	"pkg.agungdp.dev/candi/tracer"
)

type roleRepoMongo struct {
	readDB, writeDB *mongo.Database
	collection      string
}

// NewRoleRepoMongo mongo repo constructor
func NewRoleRepoMongo(readDB, writeDB *mongo.Database) RoleRepository {
	return &roleRepoMongo{
		readDB, writeDB, "roles",
	}
}

func (r *roleRepoMongo) FetchAll(ctx context.Context, filter domain.RoleListFilter) (data []shareddomain.Role, err error) {
	trace := tracer.StartTrace(ctx, "RoleRepoMongo:FetchAll")
	defer trace.Finish()
	ctx = trace.Context()
	defer func() { trace.SetError(err); tracer.Log(ctx, "results", data) }()

	where := bson.M{}
	if filter.AppsID != "" {
		where["appsId"] = filter.AppsID
	}
	if len(filter.RoleIDs) > 0 {
		where["_id"] = bson.M{
			"$in": filter.RoleIDs,
		}
	}
	trace.SetTag("query", where)

	findOptions := options.Find()
	if len(filter.OrderBy) > 0 {
		findOptions.SetSort(filter)
	}

	if !filter.ShowAll {
		findOptions.SetLimit(int64(filter.Limit))
		findOptions.SetSkip(int64(filter.Offset))
	}
	cur, err := r.readDB.Collection(r.collection).Find(ctx, where, findOptions)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var role shareddomain.Role
		err := cur.Decode(&role)
		if err != nil {
			return data, err
		}
		data = append(data, role)
	}

	return
}

func (r *roleRepoMongo) Find(ctx context.Context, data *shareddomain.Role) (err error) {
	trace := tracer.StartTrace(ctx, "RoleRepoMongo:Find")
	defer trace.Finish()
	defer func() { trace.SetError(err) }()
	ctx = trace.Context()

	bsonWhere := make(bson.M)
	if data.ID != "" {
		bsonWhere["_id"] = data.ID
	}
	if data.Code != "" {
		bsonWhere["code"] = data.Code
	}
	if data.Name != "" {
		bsonWhere["name"] = data.Name
	}
	if data.AppsID != "" {
		bsonWhere["appsId"] = data.AppsID
	}
	trace.SetTag("query", bsonWhere)

	return r.readDB.Collection(r.collection).FindOne(ctx, bsonWhere).Decode(data)
}

func (r *roleRepoMongo) Count(ctx context.Context, filter domain.RoleListFilter) int64 {
	trace := tracer.StartTrace(ctx, "RoleRepoMongo:Count")
	defer trace.Finish()

	where := bson.M{}
	if filter.AppsID != "" {
		where["appsId"] = filter.AppsID
	}
	if len(filter.RoleIDs) > 0 {
		where["_id"] = bson.M{
			"$in": filter.RoleIDs,
		}
	}

	count, err := r.readDB.Collection(r.collection).CountDocuments(trace.Context(), where)
	trace.SetError(err)
	return count
}

func (r *roleRepoMongo) GroupByID(ctx context.Context, roleID ...string) (groups map[string]shareddomain.Role) {
	trace := tracer.StartTrace(ctx, "RoleRepoMongo:GroupByID")
	ctx = trace.Context()
	defer func() { tracer.Log(ctx, "results", groups); trace.Finish() }()

	groups = make(map[string]shareddomain.Role)
	where := bson.M{
		"_id": bson.M{
			"$in": roleID,
		},
	}
	trace.SetTag("query", where)
	cur, err := r.readDB.Collection(r.collection).Find(ctx, where)
	if err != nil {
		trace.SetError(err)
		return
	}
	defer cur.Close(ctx)

	for cur.Next(ctx) {
		var role shareddomain.Role
		err := cur.Decode(&role)
		if err != nil {
			trace.SetError(err)
			return
		}
		groups[role.ID] = role
	}

	return
}

func (r *roleRepoMongo) Save(ctx context.Context, data *shareddomain.Role) (err error) {
	trace := tracer.StartTrace(ctx, "RoleRepoMongo:Save")
	defer trace.Finish()
	defer func() { trace.SetError(err) }()
	ctx = trace.Context()
	tracer.Log(ctx, "data", data)

	data.ModifiedAt = time.Now()
	if data.ID == "" {
		data.ID = primitive.NewObjectID().Hex()
		data.CreatedAt = time.Now()
		_, err = r.writeDB.Collection(r.collection).InsertOne(ctx, data)
	} else {
		opt := options.UpdateOptions{
			Upsert: candihelper.ToBoolPtr(true),
		}
		_, err = r.writeDB.Collection(r.collection).UpdateOne(ctx,
			bson.M{
				"_id": data.ID,
			},
			bson.M{
				"$set": data,
			}, &opt)
	}

	return
}
