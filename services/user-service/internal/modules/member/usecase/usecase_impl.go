// Code generated by candi v1.8.17.

package usecase

import (
	"context"
	"crypto/sha1"
	"monorepo/services/user-service/internal/modules/member/domain"
	"monorepo/services/user-service/pkg/helper"
	shareddomain "monorepo/services/user-service/pkg/shared/domain"
	"monorepo/services/user-service/pkg/shared/repository"

	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/codebase/factory/dependency"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
)

type memberUsecaseImpl struct {
	cache interfaces.Cache

	repoMongo *repository.RepoMongo
}

// NewMemberUsecase usecase impl constructor
func NewMemberUsecase(deps dependency.Dependency) MemberUsecase {
	return &memberUsecaseImpl{
		cache: deps.GetRedisPool().Cache(),

		repoMongo: repository.GetSharedRepoMongo(),
	}
}

func (uc *memberUsecaseImpl) GetAllMember(ctx context.Context, filter candishared.Filter) (data []shareddomain.Member, meta candishared.Meta, err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:GetAllMember")
	defer trace.Finish()
	ctx = trace.Context()

	data, err = uc.repoMongo.MemberRepo.FetchAll(ctx, &filter)
	if err != nil {
		return data, meta, err
	}
	count := uc.repoMongo.MemberRepo.Count(ctx, &filter)
	meta = candishared.NewMeta(filter.Page, filter.Limit, count)

	return
}

func (uc *memberUsecaseImpl) GetDetailMember(ctx context.Context, id string) (data shareddomain.Member, err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:GetDetailMember")
	defer trace.Finish()
	ctx = trace.Context()

	data.ID = id
	err = uc.repoMongo.MemberRepo.Find(ctx, &data)
	data.Password = ""
	return
}

func (uc *memberUsecaseImpl) SaveMember(ctx context.Context, data *shareddomain.Member) (err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:SaveMember")
	defer trace.Finish()
	ctx = trace.Context()

	return uc.repoMongo.MemberRepo.Save(ctx, data)
}

func (uc *memberUsecaseImpl) Register(ctx context.Context, data *domain.RegisterPayload) (err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:Register")
	defer trace.Finish()
	ctx = trace.Context()

	passHasher := helper.NewPassword(sha1.New, 8, 32, 15000)
	pass := passHasher.HashPassword(data.Password)

	member := shareddomain.Member{
		Username:     data.Username,
		Fullname:     data.Fullname,
		Password:     pass.CipherText,
		PasswordSalt: pass.Salt,
	}
	return uc.repoMongo.MemberRepo.Save(ctx, &member)
}
