// Code generated by candi v1.3.1.

package usecase

import (
	"context"

	"monorepo/sdk"
	shareddomain "monorepo/services/user-service/pkg/shared/domain"
	"monorepo/services/user-service/pkg/shared/repository"

	"pkg.agungdp.dev/candi/candishared"
	"pkg.agungdp.dev/candi/codebase/factory/dependency"
	"pkg.agungdp.dev/candi/codebase/interfaces"
	"pkg.agungdp.dev/candi/tracer"
)

type memberUsecaseImpl struct {
	cache interfaces.Cache

	repoMongo *repository.RepoMongo
	sdk       sdk.SDK
}

// NewMemberUsecase usecase impl constructor
func NewMemberUsecase(deps dependency.Dependency) MemberUsecase {
	return &memberUsecaseImpl{
		cache: deps.GetRedisPool().Cache(),

		repoMongo: repository.GetSharedRepoMongo(),
		sdk:       sdk.GetSDK(),
	}
}

func (uc *memberUsecaseImpl) Save(ctx context.Context, data *shareddomain.Member) (err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:FindAll")
	defer trace.Finish()
	ctx = trace.Context()

	return uc.repoMongo.MemberRepo.Save(ctx, data)
}

func (uc *memberUsecaseImpl) GetMemberByID(ctx context.Context, id string) (data shareddomain.Member, err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:GetMemberByID")
	defer trace.Finish()
	ctx = trace.Context()

	data.ID = id
	err = uc.repoMongo.MemberRepo.Find(ctx, &data)
	data.Password = ""
	return
}

func (uc *memberUsecaseImpl) GetAllMember(ctx context.Context, filter candishared.Filter) (data []shareddomain.Member, meta candishared.Meta, err error) {
	trace := tracer.StartTrace(ctx, "MemberUsecase:GetAllMember")
	defer trace.Finish()
	ctx = trace.Context()

	filter.CalculateOffset()
	count := uc.repoMongo.MemberRepo.Count(ctx, filter)
	data, err = uc.repoMongo.MemberRepo.FetchAll(ctx, filter)
	if err != nil {
		return data, meta, err
	}

	meta = candishared.NewMeta(filter.Page, filter.Limit, int(count))
	return
}
